/*package kr.happyjob.study.suplct.controller;

import java.io.File;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.happyjob.study.suplct.model.AttendeeStuModel;
import kr.happyjob.study.suplct.model.LectureModel;
import kr.happyjob.study.suplct.model.LectureModelStu;
import kr.happyjob.study.suplct.service.SuplctService;

@Controller
@RequestMapping("/suplct/")
public class SuplctController {
   
   @Autowired
   SuplctService suplctService;
   
   // Set logger
   private final Logger logger = LogManager.getLogger(this.getClass());

   // Get class name for logger
   private final String className = this.getClass().toString();
   
   
   
   *//**
    * 초기화면
    *//*
   @RequestMapping("lecture.do")
   public String lecture(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
         HttpServletResponse response, HttpSession session) throws Exception {
      
      logger.info("+ Start " + className + ".lecture");
      logger.info("   - paramMap : " + paramMap);
      
       //리턴페이지  
      String returnpage="";
      //  유저타입 세션에서 가져와서 선언  
      String usertype = (String) session.getAttribute("userType");
      logger.info("   -  usertype  : " +  usertype );
      // 로그인 아이디 세션에서 가져와서 선언  
 	 String loginID = (String) session.getAttribute("loginId");
 	  logger.info("   -  loginID  : " +  loginID );
     
 	  // 유저타입 분기처리 
 		if("T".equals(usertype)){ //강사일 경우 
 		
 			paramMap.put("prof_id",loginID);
 			returnpage = "suplct/proflectureList";
 	      
 		}else if("S".equals(usertype)){ // 학생일 경우
 	    	
 	    	  paramMap.put("loginID", loginID); 
 	          returnpage = "suplct/stutotallectureList";
 	      
 	    }else if("M".equals(usertype)){ // "M" 관리자일경우
 	    	 
 	    	  paramMap.put("loginID", loginID);
 	          logger.info("관리자 컨트톨러 탐~~~~");
 	          returnpage = "suplct/mastotallectureList"; 
 	    }
 	    else{
 	    	System.out.println("잘못된 접근입니다.");
 	    }
 		
 	  logger.info("+ End " + returnpage + ".returnpage");	
      logger.info("+ End " + className + ".lecture");

      return  "returnpage";
   }
  
   *//** 관리자가 조회하는 mastotal lectureList.do *//*
  @RequestMapping("mastotallectureList.do")
   public String lecturelist(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
         HttpServletResponse response, HttpSession session) throws Exception {
      
      logger.info("+ Start " + className + ".lecturelist");
      logger.info("   - paramMap : " + paramMap);
      logger.info("★★★★★★★★★현재 접속한 사람의 유저타입 : "+ session.getAttribute("userType")); // T: 강사 || S: 학생 || M :관리자
    
    
      *//** 공통 - 페이지 처리 *//*
      int pagenum = Integer.parseInt((String) paramMap.get("pagenum"));
      int pageSize = Integer.parseInt((String) paramMap.get("pageSize"));
      int pageindex = (pagenum - 1) * pageSize;
      
      paramMap.put("pageSize", pageSize);
      paramMap.put("pageindex", pageindex);
      
      
      List<LectureModel> maslecturesearchlist = suplctService.maslecturelist(paramMap);
	  int totalcnt = suplctService.cntlecturelist(paramMap);
	  model.addAttribute("maslecturesearchlist", maslecturesearchlist);
      model.addAttribute("totalcnt", totalcnt);
      logger.info("관리자 컨트톨러 탐~~~~");
      
      
      
      
      *//** 리턴페이지  *//*
     String returnpage="";
  *//**     유저타입 세션에서 가져와서 선언  *//*
     String usertype = (String) session.getAttribute("userType");
    
      *//**로그인 아이디 세션에서 가져와서 선언  *//*
	 String loginID = (String) session.getAttribute("loginId");
    
    
*//**	   유저타입 분기처리*//* 
	*//**	if("T".equals(usertype)){ //강사일 경우 
		
			paramMap.put("prof_id",loginID);
			List<LectureModel> proflecturesearchlist = suplctService.proflecturelist(paramMap);
	    	int totalcnt = suplctService.cntproflecturelist(paramMap);
	    	model.addAttribute("proflecturesearchlist", proflecturesearchlist);
	        model.addAttribute("totalcnt", totalcnt); // 이 부분이 변수처리 좀 걸림.???
	    	
			returnpage = "suplct/proflectureListgrd";
	      
		}else if("S".equals(usertype)){ // 학생일 경우
	    	
	    	  paramMap.put("loginID", loginID); 
	    	  List<LectureModel> stulecturesearchlist = suplctService.stulecturelist(paramMap);
	    	  int totalcnt = suplctService.cntstulecturelist(paramMap);
	    	  model.addAttribute("stulecturesearchlist", stulecturesearchlist);
	          model.addAttribute("totalcnt", totalcnt); 
	    	  
	          returnpage = "suplct/stutotallectureListgrd";
	      
	    }else { // "M" 관리자일경우
	    	 
	    	  paramMap.put("loginID", loginID);
	    	  
	          returnpage = "suplct/mastotallectureListgrd"; 
	    } *//*
      
      String returnpage="";
      
	  logger.info("+ End " + returnpage + ".returnpage");
      logger.info("+ End " + className + ".lecturelist");
      
      return "suplct/mastotallectureListgrd";
      
   }
  
  *//** 학생이 조회하는 stulectureList.do *//*
  @RequestMapping("stulectureList.do")
   public String lecturelistStu(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
         HttpServletResponse response, HttpSession session) throws Exception {
      
      logger.info("+ Start " + className +"[USERTYPE : STUDENT ]" +".lecturelist_STU");
      logger.info("   - paramMap : " + paramMap);
      logger.info("★★★★★★★★★현재 접속한 사람의 유저타입 : "+ session.getAttribute("userType")); // T: 강사 || S: 학생 || M :관리자
     
      // 현 접속자 유저타입 
      String userType = session.getAttribute("userType").toString();
      paramMap.put("loginid", (String) session.getAttribute("loginId"));
      
     
      int pagenum = Integer.parseInt((String) paramMap.get("pagenum"));
      int pageSize = Integer.parseInt((String) paramMap.get("pageSize"));
      int pageindex = (pagenum - 1) * pageSize;
      
      paramMap.put("pageSize", pageSize);
      paramMap.put("pageindex", pageindex);
      
       
      // Controller  Service  Dao  SQL
      List<LectureModelStu> stulecturesearchlist = suplctService.stulecturesearchlist(paramMap);
      int totalcnt = suplctService.stucountlecturelist(paramMap);
      
      model.addAttribute("stulecturesearchlist", stulecturesearchlist);
      model.addAttribute("totalcnt", totalcnt);
      
      
      logger.info("+ End " + className + ".STU_lecturelist");

      return "suplct/stulectureListgrd";
   }

  
  @RequestMapping("lectureSave.do")
  @ResponseBody
   public Map<String, Object> lectureAdd(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
      HttpServletResponse response, HttpSession session) throws Exception {
  
	   logger.info("+ Start " + className + ".lectureAdd(withFile)");
	   logger.info("   - paramMap : " + paramMap);
	   logger.info("============paramMap lectureAdd=============" + paramMap);
	   
	   String action = (String) paramMap.get("action");
	   
	   paramMap.put("loginid", (String) session.getAttribute("loginId"));
	   
	   
	   int returncval = 0;
	   
	   if("I".equals(action)) {
	 	  returncval = suplctService.lectureinsert(paramMap,request);
	   } else if("U".equals(action)) {
	 	  returncval = suplctService.lectureupdate(paramMap,request);
	   } else if("D".equals(action)) {
	 	  returncval = suplctService.lecturedelete(paramMap);
	   }      
	   
	   Map<String, Object> returnmap = new HashMap<String, Object>();
	   
	   returnmap.put("returncval", returncval);
	   
	   logger.info("+ End " + className + ".lectureAdd(withFile)");
	
	   return returnmap;
}    
  
*//**학생정보 *//*
  	  @RequestMapping("lectureAttendee.do")
  	public String attendeelist(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
        HttpServletResponse response, HttpSession session) throws Exception {
     
     logger.info("+ Start " + className + ".attendeelist");
     logger.info("   - paramMap : " + paramMap);
     
     int pagenum = Integer.parseInt((String) paramMap.get("stuPageNo"));
     int pageSize = Integer.parseInt((String) paramMap.get("pageSize"));
     int pageindex = (pagenum - 1) * pageSize;
     
     paramMap.put("pageSize", pageSize);
     paramMap.put("pageindex", pageindex);
     
     // Controller  Service  Dao  SQL
     List<AttendeeStuModel> attendeesearchlist = suplctService.attendeesearchlist(paramMap);
     int totalcnt = suplctService.countattendeelist(paramMap);
     
     model.addAttribute("attendeesearchlist", attendeesearchlist);
     model.addAttribute("totalcnt", totalcnt);
     
     
     logger.info("+ End " + className + ".attendeelist");

     return "suplct/attendeeListgrd";
  }
 

  

  	*//**강의 하나 선택시*//*
   @RequestMapping("lectureSelectOne.do")
   @ResponseBody
   	public Map<String, Object> lectureselectone(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
         HttpServletResponse response, HttpSession session) throws Exception {
      
	   		logger.info("+ Start " + className + ".lectureSelectOne");
	   		logger.info("   - paramMap : " + paramMap);
	   		logger.info("lectureSelectOne paramMap================="+ paramMap);
      
      // Controller  Service  Dao  SQL
      LectureModel lecturesearch = suplctService.lectureselectone(paramMap);
      
      Map<String, Object> returnmap = new HashMap<String, Object>();
      
      returnmap.put("lecturesearch", lecturesearch);
      
      
      logger.info("+ End " + className + ".lectureSelectOne");

      return returnmap;
   } 

   *//**파일 다운로드 *//*
   @RequestMapping("downloadLectureFile.do")
	public void downloadBbsAtmtFil(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
	
		logger.info("+ Start " + className + ".downloadBbsAtmtFil");
		logger.info("   - paramMap : " + paramMap);
		
		// 첨부파일 조회
		LectureModel lecturesearch = suplctService.lectureselectone(paramMap);  // file 이름    , 물리경로
		
		byte fileByte[] = FileUtils.readFileToByteArray(new File(lecturesearch.getFile_physic_path())); // 다운로드 하기 위해서 fileByte[]
		
		response.setContentType("application/octet-stream");// hearder에 넣는 값으로 
	    response.setContentLength(fileByte.length);
	    response.setHeader("Content-Disposition", "attachment; fileName=\"" + URLEncoder.encode(lecturesearch.getFile_name(),"UTF-8")+"\";");
	    response.setHeader("Content-Transfer-Encoding", "binary");
	    response.getOutputStream().write(fileByte);
	     
	    response.getOutputStream().flush();
	    response.getOutputStream().close();

		logger.info("+ End " + className + ".downloadBbsAtmtFil");
	}
    
  
   
	   
	   
	   
      
}*/