package kr.happyjob.study.suplct.controller;

import java.io.File;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.happyjob.study.suplct.model.AttendeeStuModel;
import kr.happyjob.study.suplct.model.LectureModel;
import kr.happyjob.study.suplct.model.RoomModel;
import kr.happyjob.study.suplct.service.SuplctService;

@Controller
@RequestMapping("/suplct/")
public class SuplctController {
   
/*   20230710 17h 08m 커밋용 주석!!!!!!*/
	
   @Autowired
   SuplctService suplctService;
   
   // Set logger
   private final Logger logger = LogManager.getLogger(this.getClass());

   // Get class name for logger
   private final String className = this.getClass().toString();
   
   
   
   /**
    * 초기화면
    */
   @RequestMapping("lecture.do")
   public String lecture(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
         HttpServletResponse response, HttpSession session) throws Exception {
      
      logger.info("+ Start " + className + ".lecture");
      logger.info("   - paramMap : " + paramMap);
      
     
      logger.info("+ End " + className + ".lecture");

      return  "suplct/lectureList";
   }
  
   /** 전체 lectureList.do */
  @RequestMapping("lectureList.do")
   public String lecturelist(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
         HttpServletResponse response, HttpSession session) throws Exception {
      
      logger.info("+ Start " + className + ".lecturelist");
      logger.info("   - paramMap : " + paramMap);
      logger.info("★★★★★★★★★현재 접속한 사람의 유저타입 : "+ session.getAttribute("userType")); // T: 강사 || S: 학생 || M :관리자
    
    
     /** 공통 - 페이지 처리 */
      int pagenum = Integer.parseInt((String) paramMap.get("pagenum"));
      int pageSize = Integer.parseInt((String) paramMap.get("pageSize"));
      int pageindex = (pagenum - 1) * pageSize;
      
      paramMap.put("pageSize", pageSize);
      paramMap.put("pageindex", pageindex);
      
      
     /**     리턴페이지  */
     String returnpage="";
     /**  유저타입 세션에서 가져와서 선언  */
     String usertype = (String) session.getAttribute("userType");
    
      /**로그인 아이디 세션에서 가져와서 선언  */
	 String loginID = (String) session.getAttribute("loginId");
    
    
	 /** 유저타입 분기처리  */
		if("T".equals(usertype)){ //강사일 경우 
			paramMap.put("loginID",loginID);
			List<LectureModel> proflecturesearchlist = suplctService.proflecturelist(paramMap);
	    	int totalcnt = suplctService.cntproflecturelist(paramMap);
	    	model.addAttribute("proflecturesearchlist", proflecturesearchlist);
	        model.addAttribute("totalcnt", totalcnt); 
	        logger.info("강사 컨트톨러 탐~~~~");
			returnpage = "suplct/proflectureListgrd";
	      
		}else if("S".equals(usertype)){ // 학생일 경우
	    	
	    	  paramMap.put("loginID", loginID); 
	    	  List<LectureModel> stulecturesearchlist = suplctService.stulecturelist(paramMap);
	    	  int totalcnt = suplctService.cntstulecturelist(paramMap);
	    	  model.addAttribute("stulecturesearchlist", stulecturesearchlist);
	          model.addAttribute("totalcnt", totalcnt); 
	    	  
	          returnpage = "suplct/stutotallectureListgrd";
	      
	    }else { // "M" 관리자일경우
	    	 
	    	  paramMap.put("loginID", loginID);
	    	  List<LectureModel> maslecturesearchlist = suplctService.maslecturelist(paramMap);
	    	  int totalcnt = suplctService.cntlecturelist(paramMap);
	    	  model.addAttribute("maslecturesearchlist", maslecturesearchlist);
	          model.addAttribute("totalcnt", totalcnt);
	          logger.info("관리자 컨트톨러 탐~~~~");
	          
	          returnpage = "suplct/mastotallectureListgrd"; 
	    } 
      
	  logger.info("+ End " + returnpage + ".returnpage");
     logger.info("+ End " + className + ".lecturelist");
      
      return returnpage;
      
   }

  
  /** 강의 등록 */
  @RequestMapping("lectureSave.do")
  @ResponseBody
   public Map<String, Object> lectureAdd(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
      HttpServletResponse response, HttpSession session) throws Exception {
  
	   logger.info("+ Start " + className + ".lectureAdd(withFile)");
	   logger.info("   - paramMap : " + paramMap);
	   logger.info("============paramMap lectureAdd=============" + paramMap);
	   
	   String action = (String) paramMap.get("action");
	   
	   paramMap.put("loginid", (String) session.getAttribute("loginId"));
	   
	   String insertYoil = (String) paramMap.get("checkyoils");
	   logger.info("insertYoil = "+insertYoil);
	   String lec_start_date = (String) paramMap.get("lec_start");
	   String lec_end_date = (String) paramMap.get("lec_end");
	   String stime =(String) paramMap.get("lec_stime");
	   String etime = (String) paramMap.get("lec_etime");
	   
	   String final_start_time = lec_start_date+ " " + stime;
	   String final_end_time = lec_end_date+ " " + etime;
	   
	   paramMap.put("lec_starttime", final_start_time);
	   paramMap.put("lec_endtime", final_end_time);
	   
	   
	   int returncval = 0;
	   
	   if("I".equals(action)) {
	 	  returncval = suplctService.lectureinsert(paramMap,request);
	   } else if("U".equals(action)) {
	 	  returncval = suplctService.lectureupdate(paramMap,request);
	   } else if("D".equals(action)) {
	 	  returncval = suplctService.lecturedelete(paramMap);
	 	  
	   }      
	   
	   Map<String, Object> returnmap = new HashMap<String, Object>();
	   
	   returnmap.put("returncval", returncval);
	   
	   logger.info("+ End " + className + ".lectureAdd(withFile)");
	
	   return returnmap;
  }    
  
  
  /** 수강 학생정보 */ 
  @RequestMapping("lectureAttendee.do")
  	public String attendeelist(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
        HttpServletResponse response, HttpSession session) throws Exception {
     
     logger.info("+ Start " + className + ".attendeelist");
     logger.info("   - paramMap : " + paramMap);
     
     int pagenum = Integer.parseInt((String) paramMap.get("stuPageNo"));
     int pageSize = Integer.parseInt((String) paramMap.get("pageSize"));
     int pageindex = (pagenum - 1) * pageSize;
     
     paramMap.put("pageSize", pageSize);
     paramMap.put("pageindex", pageindex);
     
     // Controller  Service  Dao  SQL
     List<AttendeeStuModel> attendeesearchlist = suplctService.attendeesearchlist(paramMap);
     int totalcnt = suplctService.countattendeelist(paramMap);
     
     model.addAttribute("attendeesearchlist", attendeesearchlist);
     model.addAttribute("totalcnt", totalcnt);
     
     
     logger.info("+ End " + className + ".attendeelist");

     return "suplct/attendeeListgrd";
  }
 

  	/**강의 하나 선택시*/
   @RequestMapping("lectureSelectOne.do")
   @ResponseBody
   	public Map<String, Object> lectureselectone(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
         HttpServletResponse response, HttpSession session) throws Exception {
      
	   		logger.info("+ Start " + className + ".lectureSelectOne");
	   		logger.info("   - paramMap : " + paramMap);
	   		logger.info("lectureSelectOne paramMap================="+ paramMap);
      
      // Controller  Service  Dao  SQL
      LectureModel lecturesearch = suplctService.lectureselectone(paramMap);
      
      Map<String, Object> returnmap = new HashMap<String, Object>();
      
      returnmap.put("lecturesearch", lecturesearch);
      
      logger.info("lecturesearch  ================="+ lecturesearch );
      logger.info("+ End " + className + ".lectureSelectOne");

      return returnmap;
   } 

   /** [학생 ]강의 하나 선택시 - 상세계획서 노출 */
   @RequestMapping("selectOneDtInfo.do")
   @ResponseBody
   	public Map<String, Object> selectoneDtInfo(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
         HttpServletResponse response, HttpSession session) throws Exception {
      
	   		logger.info("+ Start " + className + ".selectOneDtInfo");
	   		logger.info("   - paramMap : " + paramMap);
	   		
	   		
	   	 paramMap.put("loginID",(String) session.getAttribute("loginId"));
	   		logger.info("selectoneDtInfo paramMap================="+ paramMap);
      
      // Controller  Service  Dao  SQL
	  LectureModel lecDtInfo = suplctService.lectureDtselectone(paramMap);
      
      Map<String, Object> returnmap = new HashMap<String, Object>();
      
      returnmap.put("lecDtInfo", lecDtInfo);
      
      
      logger.info("+ End " + className + ".selectOneDtInfo");

      return returnmap;
   } 


   /* 강의 하나 삭제 */
   @RequestMapping("delLec.do")
	@ResponseBody
	public Map<String, Object> del_lec(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
		
		logger.info("+ Start " + className + ".delLec");
		logger.info("   - paramMap : " + paramMap);
		logger.info("=====================del Lec.do Controller 탔어요~~================================");

	   paramMap.put("loginid", (String) session.getAttribute("loginId"));
	
	
	      int returnvalue = 0;
	
	      returnvalue = suplctService.lecturedelete_dir(paramMap);      
	
	      Map<String, Object> returnmap = new HashMap<String, Object>();
	
	      returnmap.put("returnvalue", returnvalue);

		
		logger.info("+ End " + className + ".delLec");
		
		return returnmap;
	}
   
   /**파일 다운로드 */
   @RequestMapping("downloadLectureFile.do")
	public void downloadBbsAtmtFil(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
	
		logger.info("+ Start " + className + ".downloadBbsAtmtFil");
		logger.info("   - paramMap : " + paramMap);
		
		// 첨부파일 조회
		LectureModel lecturesearch = suplctService.lectureselectone(paramMap);  // file 이름    , 물리경로
		
		byte fileByte[] = FileUtils.readFileToByteArray(new File(lecturesearch.getFile_physic_path())); // 다운로드 하기 위해서 fileByte[]
		
		response.setContentType("application/octet-stream");// hearder에 넣는 값으로 
	    response.setContentLength(fileByte.length);
	    response.setHeader("Content-Disposition", "attachment; fileName=\"" + URLEncoder.encode(lecturesearch.getFile_name(),"UTF-8")+"\";");
	    response.setHeader("Content-Transfer-Encoding", "binary");
	    response.getOutputStream().write(fileByte);
	     
	    response.getOutputStream().flush();
	    response.getOutputStream().close();

		logger.info("+ End " + className + ".downloadBbsAtmtFil");
	}
    
  
   /*[관리자]학생 강의 수강 승인 */
   @RequestMapping("stuSignInApprove.do")
	@ResponseBody
	public Map<String, Object> stulecSignInApprove(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
		
		logger.info("+ Start " + className + ".stuSignInApprove");
		logger.info("   - paramMap : " + paramMap);
		logger.info("=====================stuSignInApprove 탔어요~~================================");

	    paramMap.put("loginid", (String) session.getAttribute("loginId"));
	
		/*paramMap.put(*/
				
	      int returnvalue = 0;
	
	      returnvalue = suplctService.stulecSignInApproveUpdate(paramMap);      
	
	      Map<String, Object> returnmap = new HashMap<String, Object>();
	
	      returnmap.put("returnvalue", returnvalue);

		
		logger.info("+ End " + className + ".stuSignInApprove");
		
		return returnmap;
	}
   
   
   
   @RequestMapping(value="sameTimeChecking.do", method=RequestMethod.POST)
   @ResponseBody
   public int check_sameTime(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
	         HttpServletResponse response, HttpSession session,  @RequestParam(value="checkyoil[]") List<String> checkyoil) throws Exception{
	   
	   logger.info("+ Start " + className + ".check_sameTime");
	   logger.info("파라미터로 넘어온 모델은 무엇인지~~ " + paramMap);
	   //booking_date=2023.06.28  booking_stime=12, booking_etime=16,
	   //book_start  2023.06.28 + 12
	   //book_end 2023.06.28 + 16
	   

	   for(String yoil : checkyoil){
		   logger.info("yoil-------??" + yoil);
		   
		   		   
	   }
	   logger.info("checkyoil이 어떤 형태로 넘어오는지...." + checkyoil); //[월, 화, 수, 목, 금]
	   paramMap.put("yoilArray", checkyoil);
	   
	   String stime = (String) paramMap.get("lec_stime");
	   String etime = (String) paramMap. get("lec_etime");
	   String startTime = stime + ":00:00";
	   String endTime = etime + ":00:00";
	  
	   paramMap.put("startTime", startTime);
	   paramMap.put("endTime", endTime);
	   
	   
	   
	   String date = (String) paramMap.get("booking_date"); 
	   String s_date = (String) paramMap.get("lec_start");
	   String e_date = (String) paramMap. get("lec_end");
	
	   String roomNo=(String) paramMap.get("room_no");
	   paramMap.put("loginID",(String) session.getAttribute("loginId"));
	   

	   logger.info("다시 세팅해서 넘길파라미터는?? " + paramMap);
	   
	   
	   String lec_no =(String) paramMap. get("lec_no");
	   logger.info("lec_no가 존재하니???? " + lec_no); //수정하는경우...
	   logger.info("??" + "".equals(lec_no));
	   
	
	   //{room_no=1, lec_start=2023-07-04, lec_end=2023-07-28, lec_stime=10, lec_etime=15, checkyoil[]=월, 
	   //yoilArray=[월, 화, 수], startTime=10:00:00, endTime=15:00:00, loginID=admin}
	   //*************************** 검색쿼리 날리기.*************************************//
	   int result = 0;
	   
	   
	   ///////강의 자기가 수정할때///////
	   //자기가 자신의 것을 수정하는 경우
	   int myval = 0;
	 // myval = rsvremService.countMyRsvOne(paramMap);
	   logger.info("myval===="+ myval);
	   //myval = 0 이면 원래대로 진행하고
	   //myval = 1이면 자신의 것을 제외해야함.;.;;
	   //select * from tb_study_booking where book_no not like 30;
	   
	   //s_date~e_date 비교 (e_date는 s_date보다 숫자가 커야한다. 날이 늦어야한다)
	   

	   
	   
	
	  
	   
	   String room_no = (String) paramMap. get("room_no");

	   //TODO: 배열체크하기 checkyoil.length ==0
	   
	   if ("".equals(stime) || "".equals(etime)){
		   result = -1;
	   } else if(Integer.parseInt(stime) >= Integer.parseInt(etime)){
		   result = -1;
		   
	   } else if("".equals(room_no)){
		   result = -2;
	   } else if(checkyoil.size() ==0){
		   result = -3;
	   } else if("".equals(s_date) || "".equals(e_date)){
		   result = -4;
		   
	   } 
	   
	   else {
		   RoomModel findRoom = suplctService.findRoom(paramMap);
		   String str = findRoom.getRm_yn();
		  logger.info(str.equals("N"));
		   SimpleDateFormat sDate = new SimpleDateFormat("yyyy-MM-dd");
		   logger.info("★★★★" + s_date); //★★★★2023-07-02 12:00:00
		   
		   Date startDate =sDate.parse(s_date); //Sun Jul 02 00:00:00 KST 2023
		   Date endDate =sDate.parse(e_date); //Sun Jul 02 00:00:00 KST 2023

		   logger.info("★★★★★★" + startDate);
		   logger.info("★★★★★★" + endDate);
		   logger.info("★★★★★★??????" + endDate.after(startDate));
		   
		 
		  if(str.equals("N")){
			   result = -6;
		   }
		  else if(startDate.after(endDate)){
			   result = -5;
		  } 
			  
	  
	   
		  else if("".equals(lec_no)){
			   
//			  if("".equals(lec_no)){
			   
			   result = suplctService.checkSameTime(paramMap);
		   } 
		   
		   else {
				 
			   result =  suplctService.checkSameTimeUpdating(paramMap);
			  
		    }
	   
	   
	   
	   } 
	   
	   
	   
	   
	   
	   logger.info("+ End " + className + ".check_sameTime");  
	   return result;
	 }
   
   
   
   
   @RequestMapping(value="enrollSameTimeChecking.do", method=RequestMethod.POST)
   @ResponseBody
   public int enroll_check_sameTime(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
	         HttpServletResponse response, HttpSession session) throws Exception{
	   
	   logger.info("+ Start " + className + ".enroll_check_sameTime");
	   logger.info("파라미터로 넘어온 모델은 무엇인지~~ " + paramMap);

	   paramMap.put("loginID",(String) session.getAttribute("loginId"));
	   

	   logger.info("다시 세팅해서 넘길파라미터는?? " + paramMap);
	   String acc_yn = (String) paramMap. get("acc_yn"); //학생의 수강신청 정보상태 N반려, C수강취소, P신청중, Y승인된상태
	   //C이 거나 null이면 진행시키고, P나 Y면 시간의 중복에 걸리고, N인경우에는.. 아얘 신청못하게해야함
	 
	   
	   String lec_no =(String) paramMap. get("lec_no");
	   logger.info("lec_no가 존재하니???? " + lec_no); 
	   logger.info("??" + "".equals(lec_no));
	   
	   LectureModel lecfind = suplctService.lectureselectone(paramMap);
	   //{room_no=1, lec_start=2023-07-04, lec_end=2023-07-28, lec_stime=10, lec_etime=15, checkyoil[]=월, 
	   //yoilArray=[월, 화, 수], startTime=10:00:00, endTime=15:00:00, loginID=admin}
	   //*************************** 검색쿼리 날리기.*************************************//
	   
	   logger.info("lecfind====" + lecfind);
	   int result = 0;
	  
	   //TODO:  현재시간 vs lec_endtime 비교해서 현재시간이 더 지난경우 수강신청불가능하게할것.
	   String lec_endTime = lecfind.getLec_endtime();
	   
	   
	   if(lec_endTime == null){
		   result = -6;
	   } else{
		   SimpleDateFormat eDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			 
		   Date endDate =eDate.parse(lec_endTime); //Sun Jul 02 00:00:00 KST 2023
		   Date nowDate = new Date();  
		   logger.info(" //지금시간이 book시간보다 늦은지" + nowDate.after(endDate)); //지금시간이 book시간보다 늦은지
		   
	
	  
		   String yoils = lecfind.getYoil();
		   logger.info("yoil배열로변환"+ yoils);
		   if(yoils == null){
			   result = -3;
		   }else  if("N".equals(acc_yn)){
			   result = -4;
		   } else if(nowDate.after(endDate)){
			   result = -5;
		   }
		   
		   else{
			   String[] yoilArray = yoils.split(",");
			   logger.info(Arrays.toString(yoilArray));
			   List<String> yoilList = Arrays.asList(yoilArray);
			   paramMap.put("yoilList", yoilList);
			   paramMap.put("yoilArray", yoilArray); //지금이상하게넘어감 ...!
			   String lec_start = lecfind.getLec_start();
			   String lec_starttime = lecfind.getLec_starttime();
			   String lec_end = lecfind.getLec_end();
			   String lec_endtime = lecfind.getLec_endtime();
			   paramMap.put("lec_start", lec_start);
			   paramMap.put("lec_starttime", lec_starttime);
			   paramMap.put("lec_end", lec_end);
			   paramMap.put("lec_endtime", lec_endtime);
			   
		
			   logger.info("다시세팅한 파라미터는 무엇인지~~~~ " + paramMap);			   
		
			   
			   //기준테이블에 중복쿼리검사해야함.
			  //이미 수강신청되었는지도확인
			   result = suplctService.checkSameTimetoEnroll(paramMap);		   
		   	} 
	   }
	   
	   String room_no = (String) paramMap. get("room_no");

	   //TODO: 배열체크하기 checkyoil.length ==0


	   
	   logger.info("+ End " + className + ".enroll_check_sameTime");  
	   return result;
	 }
   
   
   
 	/**학생이 강의수강신청시*/
  @RequestMapping("registerCourse.do")
  @ResponseBody
  	public Map<String, Object> registerCourse(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
        HttpServletResponse response, HttpSession session) throws Exception {
     
	   		logger.info("+ Start " + className + ".registerCourse");
	   		logger.info("   - paramMap : " + paramMap);
	   		logger.info("lectureSelectOne paramMap================="+ paramMap);
     
	   	  
	 	   String action = (String) paramMap.get("action");
	 	   
	 	   paramMap.put("loginID", (String) session.getAttribute("loginId"));

	 	   	//검사한번더 수강신청했을떄 이미 취소하고 재수강신청하는경우
	 	   int cnt =0;
	 	  int returncval = 0;
	 	   cnt =suplctService.checkReEnroll(paramMap);
	 	   if(cnt==0){
	 			 
	 	 	  returncval = suplctService.stuCourseInsert(paramMap);
	 	   } else if(cnt >=1){
	 		   
	 		  returncval = suplctService.stuCourseUpdate(paramMap);
	 	   }
	 	   
	 

	 	   
	 	   Map<String, Object> returnmap = new HashMap<String, Object>();
	 	   
	 	   returnmap.put("returncval", returncval);
	 	   
	 	   logger.info("+ End " + className + ".registerCourse");
	 	
	 	   return returnmap;
  } 

	   
	   
	   
      
}