package kr.happyjob.study.exmrex.controller;

import java.io.File;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import kr.happyjob.study.exmrex.model.GradeModel;
import kr.happyjob.study.exmrex.service.ExmRexService;
import kr.happyjob.study.common.comnUtils.ComnCodUtil;
import lombok.RequiredArgsConstructor;

@Controller
@RequestMapping("/exmrex/")
public class ExmRexController {
   
   @Autowired
   ExmRexService exmRexService;
   
   // Set logger
   private final Logger logger = LogManager.getLogger(this.getClass());

   // Get class name for logger
   private final String className = this.getClass().toString();

   @RequestMapping("grade.do")
   public String grade(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
         HttpServletResponse response, HttpSession session) throws Exception {
      
      logger.info("+ Start " + className + ".notice");
      logger.info("   - paramMap : " + paramMap);
      logger.info("+ End " + className + ".notice");
      
      String loginID = (String) session.getAttribute("loginId");
      paramMap.put("loginID", loginID);
      
      List<GradeModel> lectureList = exmRexService.getLectureList(paramMap);
      model.addAttribute("lectureList", lectureList);

      return "exmrex/gradelist";
   }
       
/*    gradelit.do 요청을 처리하여 성적조회에 필요한 데이터를 조회하고
    조회 결과와 총 개수를 모델에 담아 gradelistgrd.jsp로 전달하는 역할*/
   @RequestMapping("gradelist.do")
   public String gradelist(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
         HttpServletResponse response, HttpSession session) throws Exception {
      
      logger.info("+ Start " + className + ".gradelist");
      logger.info("   - paramMap : " + paramMap);
      
      int pagenum = Integer.parseInt((String) paramMap.get("pagenum"));
      int pageSize = Integer.parseInt((String) paramMap.get("pageSize"));
      int pageindex = (pagenum - 1) * pageSize;  
      
      paramMap.put("pageSize", pageSize);
      paramMap.put("pageindex", pageindex);
      
      // Controller  Service  Dao  SQL
      List<GradeModel> gradesearchlist = exmRexService.gradelist(paramMap);
      int totalcnt = exmRexService.countgradelist(paramMap);
      System.out.println("totalcnt : " + totalcnt);
      model.addAttribute("gradesearchlist", gradesearchlist);
      model.addAttribute("totalcnt", totalcnt);
      
      logger.info("+ End " + className + ".gradelist");

      return "exmrex/gradelistgrd";
   }
   

   
   // 한 건 조회
   @RequestMapping("gradeselectone.do")   public String gradeselectone(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
         HttpServletResponse response, HttpSession session) throws Exception {
      
      logger.info("+ Start " + className + ".gradeselectone");
      logger.info("   - paramMap : " + paramMap);
      
      int pagenum = Integer.parseInt((String) paramMap.get("pagenum"));
      int pageSize = Integer.parseInt((String) paramMap.get("pageSize"));
      int pageindex = (pagenum - 1) * pageSize;  
      
      paramMap.put("pageSize", pageSize);
      paramMap.put("pageindex", pageindex);
      
      // Controller  Service  Dao  SQL
    /* GradeModel gradesearch = exmRexService.gradeselectone(paramMap);*/
      List<GradeModel> gradesearchlist = exmRexService.gradeselectonelec(paramMap);
      
      int totalleccnt = exmRexService.countgradeleclist(paramMap);
      System.out.println("totalleccnt : " + totalleccnt);
      model.addAttribute("totalleccnt", totalleccnt);
      // 강의목록  LIST    leclist 
      /*model.addAttribute("gradesearch",gradesearch);  */
      model.addAttribute("gradesearchlist",gradesearchlist);
      
      logger.info("+ End " + className + ".gradeselectone");

      return "exmrex/gradestdlistgrd";
   }   
   
   
   
   /*@RequestMapping("noticesavefile.do")
   @ResponseBody
   public Map<String, Object> noticesavefile(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
         HttpServletResponse response, HttpSession session) throws Exception {
      
      logger.info("+ Start " + className + ".noticesavefile");
      logger.info("   - paramMap : " + paramMap);
      
      String action = (String) paramMap.get("action");
      
      paramMap.put("loginid", (String) session.getAttribute("loginId"));
      
      int returncval = 0;
      
      if("I".equals(action)) {
    	  returncval = mngNotService.noticeinsertfile(paramMap,request);
      } else if("U".equals(action)) {
    	  returncval = mngNotService.noticeupdatefile(paramMap,request);
      } else if("D".equals(action)) {
    	  returncval = mngNotService.noticedeletefile(paramMap);
      }      
      
      Map<String, Object> returnmap = new HashMap<String, Object>();
      
      returnmap.put("returncval", returncval);
      
      logger.info("+ End " + className + ".noticesavefile");

      return returnmap;
   }  */
   
/*	@RequestMapping("downloadnoticefile.do")
	public void downloadBbsAtmtFil(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
	
		logger.info("+ Start " + className + ".downloadBbsAtmtFil");
		logger.info("   - paramMap : " + paramMap);
		
		// 첨부파일 조회
		NoticeModel noticesearch = mngNotService.noticeselectone(paramMap);  // file 이름    , 물리경로
		
		byte fileByte[] = FileUtils.readFileToByteArray(new File(noticesearch.getPhysic_path()));
		
		response.setContentType("application/octet-stream");
	    response.setContentLength(fileByte.length);
	    response.setHeader("Content-Disposition", "attachment; fileName=\"" + URLEncoder.encode(noticesearch.getFile_name(),"UTF-8")+"\";");
	    response.setHeader("Content-Transfer-Encoding", "binary");
	    response.getOutputStream().write(fileByte);
	     
	    response.getOutputStream().flush();
	    response.getOutputStream().close();

		logger.info("+ End " + className + ".downloadBbsAtmtFil");
	}*/
	   
	   
	   
      
}