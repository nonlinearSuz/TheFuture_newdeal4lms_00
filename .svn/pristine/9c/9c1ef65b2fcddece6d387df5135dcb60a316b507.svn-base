package kr.happyjob.study.admhrd.controller;

import java.io.File;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import kr.happyjob.study.admhrd.model.TeacherModel;
import kr.happyjob.study.admhrd.service.AdmHrdService;
import kr.happyjob.study.common.comnUtils.ComnCodUtil;
import lombok.RequiredArgsConstructor;

@Controller
@RequestMapping("/admhrd/")
public class AdmHrdController {
   
   @Autowired
   AdmHrdService admHrdService;
   
   // Set logger
   private final Logger logger = LogManager.getLogger(this.getClass());

   // Get class name for logger
   private final String className = this.getClass().toString();
   
   
   /**
    * 초기화면
    *  "notice.do" 요청이 발생하면 "mngNot/noticelist"라는 뷰 페이지를 표시
    *  Model model: 데이터를 뷰로 전달하기 위한 Spring의 Model 객체입니다.
    * @RequestParam Map<String, Object> paramMap: 요청에서 전달된 파라미
    * 터를 담고 있는 Map 객체입니다.
    * HttpServletRequest request: HTTP 요청 객체입니다.
    * HttpServletResponse response: HTTP 응답 객체입니다.
    * HttpSession session: HTTP 세션 객체입니다.
    */
   @RequestMapping("teacher.do")
   public String teacher(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
         HttpServletResponse response, HttpSession session) throws Exception {
      
      logger.info("+ Start " + className + ".notice");
      logger.info("   - paramMap : " + paramMap);
      logger.info("+ End " + className + ".notice");

      return "admhrd/teacherlist";
   }
       
   @RequestMapping("teacherlist.do")
	public String teacherlist(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
		HttpServletResponse response, HttpSession session) throws Exception {
      
      logger.info("+ Start " + className + ".teacherlist");
      logger.info("   - paramMap : " + paramMap);
      
      int pagenum = Integer.parseInt((String) paramMap.get("pagenum"));
      int pageSize = Integer.parseInt((String) paramMap.get("pageSize"));
      int pageindex = (pagenum - 1) * pageSize;  
      
      paramMap.put("pageSize", pageSize);
      paramMap.put("pageindex", pageindex);
      
      // Controller  Service  Dao  SQL
      List<TeacherModel> teachersearchlist = admHrdService.teacherlist(paramMap);
      int totalcnt = admHrdService.countteacherlist(paramMap);
      System.out.println("totalcnt : " + totalcnt);
      model.addAttribute("noticesearchlist", teachersearchlist);
      model.addAttribute("totalcnt", totalcnt);
      
      logger.info("+ End " + className + ".teacherlist");

      return "admhrd/teacherlistgrd";
   }
   
   // 회원정보(비고) 수정 
   @RequestMapping("userEtc.do")
   public void userEtc(@RequestParam Map<String, Object> paramMap, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {
	   
	      logger.info("+ Start " + className + ".notice");
	      logger.info("   - paramMap : " + paramMap);
	      logger.info("+ End " + className + ".notice");
	      
	   admHrdService.userEtc(paramMap);
   }
   
   //승인여부
   @RequestMapping("approval.do")
   public void approval(@RequestParam String loginID, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {
	   admHrdService.approval(loginID);
   }
   
   // 회원탈퇴
   @RequestMapping("teacherWithdrawal.do")
   public void teacherWithdrawal(@RequestParam String loginID, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {
	   admHrdService.teacherWithdrawal(loginID);
   }
   
   // 한 건 조회
   @RequestMapping("teacherselectone.do")   public String teacherselectone(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
         HttpServletResponse response, HttpSession session) throws Exception {
      
      logger.info("+ Start " + className + ".teachereselectone");
      logger.info("   - paramMap : " + paramMap);
      
      // Controller  Service  Dao  SQL
      TeacherModel teachersearch = admHrdService.teacherselectone(paramMap);
      List<TeacherModel> leclist = admHrdService.teacherselectonelec(paramMap);
      // 강의목록  LIST    leclist 
      model.addAttribute("teachersearch",teachersearch);   
      model.addAttribute("leclist",leclist);
      
      logger.info("+ End " + className + ".teacherselectone");

      return "admhrd/teacherleclistgrd";
   }   
   
 /*  @RequestMapping("noticesave.do")
   @ResponseBody
   public Map<String, Object> noticesave(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
         HttpServletResponse response, HttpSession session) throws Exception {
      
      logger.info("+ Start " + className + ".noticesave");
      logger.info("   - paramMap : " + paramMap);
      
      String action = (String) paramMap.get("action");
      
      paramMap.put("loginid", (String) session.getAttribute("loginId"));
      
      
      int returncval = 0;
      
      if("I".equals(action)) {
    	  returncval = mngNotService.noticeinsert(paramMap);
      } else if("U".equals(action)) {
    	  returncval = mngNotService.noticeupdate(paramMap);
      } else if("D".equals(action)) {
    	  returncval = mngNotService.noticedelete(paramMap);
      }      
      
      Map<String, Object> returnmap = new HashMap<String, Object>();
      
      returnmap.put("returncval", returncval);
      
      logger.info("+ End " + className + ".noticesave");

      return returnmap;
   }    */
   
   
   /*@RequestMapping("noticesavefile.do")
   @ResponseBody
   public Map<String, Object> noticesavefile(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
         HttpServletResponse response, HttpSession session) throws Exception {
      
      logger.info("+ Start " + className + ".noticesavefile");
      logger.info("   - paramMap : " + paramMap);
      
      String action = (String) paramMap.get("action");
      
      paramMap.put("loginid", (String) session.getAttribute("loginId"));
      
      int returncval = 0;
      
      if("I".equals(action)) {
    	  returncval = mngNotService.noticeinsertfile(paramMap,request);
      } else if("U".equals(action)) {
    	  returncval = mngNotService.noticeupdatefile(paramMap,request);
      } else if("D".equals(action)) {
    	  returncval = mngNotService.noticedeletefile(paramMap);
      }      
      
      Map<String, Object> returnmap = new HashMap<String, Object>();
      
      returnmap.put("returncval", returncval);
      
      logger.info("+ End " + className + ".noticesavefile");

      return returnmap;
   }  */
   
/*	@RequestMapping("downloadnoticefile.do")
	public void downloadBbsAtmtFil(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
	
		logger.info("+ Start " + className + ".downloadBbsAtmtFil");
		logger.info("   - paramMap : " + paramMap);
		
		// 첨부파일 조회
		NoticeModel noticesearch = mngNotService.noticeselectone(paramMap);  // file 이름    , 물리경로
		
		byte fileByte[] = FileUtils.readFileToByteArray(new File(noticesearch.getPhysic_path()));
		
		response.setContentType("application/octet-stream");
	    response.setContentLength(fileByte.length);
	    response.setHeader("Content-Disposition", "attachment; fileName=\"" + URLEncoder.encode(noticesearch.getFile_name(),"UTF-8")+"\";");
	    response.setHeader("Content-Transfer-Encoding", "binary");
	    response.getOutputStream().write(fileByte);
	     
	    response.getOutputStream().flush();
	    response.getOutputStream().close();

		logger.info("+ End " + className + ".downloadBbsAtmtFil");
	}*/
	   
	   
	   
      
}