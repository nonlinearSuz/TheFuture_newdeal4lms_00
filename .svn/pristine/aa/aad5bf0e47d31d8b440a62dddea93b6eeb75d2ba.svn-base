<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.happyjob.study.supass.dao.SupassDao">

<!-- 선생님의 경우 selectBox조회 -->
	<select id="selectBoxSet" resultType="kr.happyjob.study.supass.model.LectureModel">
	
		select lec_no, lec_name, lec_prof from tb_lecture where lec_prof = #{loginID}
	</select>
	
	<!-- 학생의 경우 selectBox조회 : -->
		<select id="selectBoxSetStudent" resultType="kr.happyjob.study.supass.model.LectureModel">
	        select rl.lec_no,			
                le.lec_name
        from tb_request_list rl
			inner join tb_lecture le on le.lec_no = rl.lec_no        
        where rl.loginID = #{loginID} and rl.acc_yn ='Y';
	</select>
	
	<!--  선생님의 경우 수업목록 조회-->
		<select id="lectureList" resultType="kr.happyjob.study.supass.model.LectureModel">
			select lc.lec_no,
			      lc.lec_name,
			       lc.lec_prof, 
			       DATE_FORMAT(lc.lec_start, '%Y-%m-%d') as lec_start,
 					DATE_FORMAT(lc.lec_end, '%Y-%m-%d') as lec_end,

			       lc.lec_end, 
			       lc.room_no,
			       lc.max_no,
			       A.cnt
		       from tb_lecture lc
       left outer join (select count(*) as cnt, lec_no from tb_request_list where acc_yn='Y' group by lec_no) A 
       			on A.lec_no = lc.lec_no  
				where lc.lec_prof = #{loginID}
				
				  		ORDER BY lc.lec_no ASC
				LIMIT #{pageIndex}, #{pageSize}
	</select>
	
	<!--  학생의 경우 수업목록 조회 -->
		<select id="lectureListByStudent" resultType="kr.happyjob.study.supass.model.LectureModel">
	    select rl.lec_no,			
	                le.lec_name,
	                le.lec_prof,
	       			 DATE_FORMAT(le.lec_start, '%Y-%m-%d') as lec_start,
 					DATE_FORMAT(le.lec_end, '%Y-%m-%d') as lec_end,
	                le.room_no,
	                le.max_no,
	                A.cnt
	             
	        from tb_request_list rl
				inner join tb_lecture le on le.lec_no = rl.lec_no        
    	  inner join (select count(*) as cnt, lec_no from tb_request_list where acc_yn='Y' group by lec_no) A on A.lec_no = rl.lec_no
   		     where rl.loginID = #{loginID} and rl.acc_yn ='Y'
   		     
   		     	ORDER BY rl.lec_no ASC
				LIMIT #{pageIndex}, #{pageSize}
   		     </select>
   		     
   		     <!-- 선생님이 강의하는 수업목록 갯수조회 -->
   		   <select id="countLectureList" resultType="int">
   		         			select  count(*)
		       from tb_lecture lc
       left outer join (select count(*) as cnt, lec_no from tb_request_list where acc_yn='Y' group by lec_no) A 
       			on A.lec_no = lc.lec_no  
				where lc.lec_prof = #{loginID}
   		     
   		  </select>
   		  
   		  <!--  학생이 수강하는 수업목록 갯수 조회 -->
   		     <select id="countLectureListByStudent" resultType="int">
   		       select  count(*)
        from tb_request_list rl
			inner join tb_lecture le on le.lec_no = rl.lec_no        
      inner join (select count(*) as cnt, lec_no from tb_request_list where acc_yn='Y' group by lec_no) A on A.lec_no = rl.lec_no
        where rl.loginID = #{loginID} and rl.acc_yn ='Y'
   		     
   		     </select>
   		     
   		     
   		     <!-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@과제관리 시작@@@@@@@@@@@@@@@@@@@@@@@ -->
   		     <!-- 선생님이, 과정마다, 등록하는 과제 목록 조회 -->
   		     <select id="assignmentTeacherList" resultType="kr.happyjob.study.supass.model.AssignmentModel">
   		     	select 
				        ta.lec_no,
				        le.lec_name,
				        ui.name,
				        ta.task_no,         
				      ta.task_nm, 
				      ta.task_cont,
				       DATE_FORMAT(ta.task_start, '%Y-%m-%d') as task_start,
				       
				       DATE_FORMAT(ta.task_due, '%Y-%m-%d') as task_due,
				     
				       le.lec_prof,				        
				     	ta.file_no,
				         fi.file_name,
					      fi.file_logic_path,
					      fi.file_physic_path,
					      fi.file_size,
					      fi.file_ext
					      
				from tb_task ta
				inner join tb_lecture le on ta.lec_no=le.lec_no				
				left outer join tb_files fi on fi.file_no = ta.file_no
				inner join tb_userinfo ui on ui.loginID = le.lec_prof
				
				 where ta.lec_no = #{lec_no}
   		     	
   		     	
   		     			ORDER BY ta.task_no DESC
				LIMIT #{pageIndex}, #{pageSize}
   		     	   		     
   		     </select>
   		     
   		     <select id="countAssignmentTodoList" resultType="int">
  				select 
					count(*)
					      
				from tb_task ta
				inner join tb_lecture le on ta.lec_no=le.lec_no				
				left outer join tb_files fi on fi.file_no = ta.file_no
				 where ta.lec_no = #{lec_no}
   		     </select>
   		     
   		     
  <insert id="assignTeacherInsertFile"> 
	<!-- before insert문ㅅ닐행전에 쿼리문실행해라. --> <!-- no라는 변수를 형성함. -->
	    <selectKey resultType="int" keyProperty="no" order="BEFORE"> <!-- order before/after -->
          select ifnull(max(task_no),0) + 1 from tb_task where lec_no =#{lecselect};
        </selectKey>   
	
		insert into tb_task
			(
				lec_no
				,task_no
				,task_nm
				,task_cont
				,enr_user
				,enr_date
				,task_start
				,task_due
				,file_no
			
			)
			values (
				<!-- no : selectKey -->
				#{lecselect}
				,#{no}
				,#{task_nm}
				,#{task_cont}
				,#{loginId}	
				,now()
				,#{task_start}
				,#{task_due}
				
	
				<if test="fileexist eq 'N'.toString()">			
				,0
				</if>
				<if test = "fileexist eq 'Y'.toString()" >
				,(select ifnull(max(file_no),0) from tb_files)
				</if>
				
			)
	</insert>
	
	
	<!-- 한건조회 assignTeacherSelectOne -->
   		      <!-- 선생님이, 과정마다, 등록하는 과제 목록 조회 -->
   		     <select id="assignTeacherSelectOne" resultType="kr.happyjob.study.supass.model.AssignmentModel">
   		     	select 
				        ta.lec_no,
				        le.lec_name,
				        ta.task_no,         
				      ta.task_nm, 
				      ta.task_cont,
				       DATE_FORMAT(ta.task_start, '%Y-%m-%d') as task_start,
				       
				       DATE_FORMAT(ta.task_due, '%Y-%m-%d') as task_due,
				     
				       le.lec_prof,
				     	ta.file_no,
				         fi.file_name,
					      fi.file_logic_path,
					      fi.file_physic_path,
					      fi.file_size,
					      fi.file_ext
					      
				from tb_task ta
				inner join tb_lecture le on ta.lec_no=le.lec_no				
				left outer join tb_files fi on fi.file_no = ta.file_no
				 where ta.lec_no = #{lec_no} and ta.task_no = #{task_no}
   		     	
   		 
   		     </select>    
   		     
   		     		<insert id ="fileInsert">
		    <selectKey resultType="int" keyProperty="no" order="BEFORE"> <!-- order before/after -->
          select ifnull(max(file_no),0) + 1 from tb_files
        </selectKey>   
		insert into tb_files 
			(
			
				 file_no
				 ,file_name
				 ,file_logic_path
				 ,file_physic_path
				 ,file_size
				 ,file_ext
				 ,enr_date
				
			) values (
			
				#{no}
				,#{fileReturn.file_nm}
					,#{fileReturn.vrfile_loc}
				,#{fileReturn.file_loc}
				,#{fileReturn.file_size}
					,#{fileReturn.fileExtension}
				,now()
			)
			
			
	</insert>
	
	
		
		<delete id="deleteFileInfo">
 <!--  	delete from tb_file where file_no = (select file_no from tb_notice where notice_no = #{notice_no})  -->
	delete from tb_files where file_no = #{file_no}
	</delete>
	
	
		
		<update id="assignTeacherUpdateFile">
			update tb_task
			set task_nm = #{task_nm}
				,task_cont = #{task_cont}
				,enr_date = now()
				,task_start = #{task_start}
				,task_due = #{task_due}
				<if test="fileexist eq 'Y'.toString()"> <!-- filePrc는 따질필요없다. -->
				,file_no = (select ifnull(max(file_no),0) from tb_files)
				</if>
				<if test="fileexist eq 'N'.toString()">
				,file_no = 0
				</if>
				where task_no = #{task_no} and lec_no = #{lec_no} 
		
	</update>
	
	
		<delete id="assignTeacherDeleteFile">
	 delete from tb_task where task_no = #{task_no} and lec_no = #{lec_no}	
	
	</delete>
	
	
	<!-- @@@@@@@@@@@@@@@@@@@@@학생 + 과제 제출 목록조회@@@@@@@@@@@@@@@@@@@@@@@@@@ -->
	     <select id="assignmentList" resultType="kr.happyjob.study.supass.model.AssignmentModel">
   		     	select 
				        ta.lec_no,
				        le.lec_name,
				        ui.name,
				        ta.task_no,         
				      ta.task_nm, 
				      ta.task_cont,
				       DATE_FORMAT(ta.task_start, '%Y-%m-%d') as task_start,
				       
				       DATE_FORMAT(ta.task_due, '%Y-%m-%d') as task_due,
				     
				       le.lec_prof,
				           ts.enr_user,
             			  ts.task_sub_no,
				     	ta.file_no,
				         fi.file_name,
					      fi.file_logic_path,
					      fi.file_physic_path,
					      fi.file_size,
					      fi.file_ext
					      
				from tb_task ta
				inner join tb_lecture le on ta.lec_no=le.lec_no				
				left outer join tb_files fi on fi.file_no = ta.file_no
				inner join tb_userinfo ui on ui.loginID = le.lec_prof
				 inner join tb_request_list rl on rl.lec_no = le.lec_no
				left outer join tb_task_send ts on ts.lec_no=ta.lec_no and ts.task_no=ta.task_no and rl.loginID = ts.enr_user
				 where ta.lec_no = #{lec_no} and rl.loginID = #{loginID}
   		     	
   		     	
   		     			ORDER BY ta.task_no DESC
				LIMIT #{pageIndex}, #{pageSize}
   		     	   		     
   		     </select>
	
	
	
	
	<!-- 한건조회 assignTaskSelectOne -->
   		      <!-- 과정마다 학생들이 등록하는 과제  조회 -->
   		     <select id="assignTaskSelectOne" resultType="kr.happyjob.study.supass.model.AssignmentModel">
   		               	select 
				        ta.lec_no,
				        le.lec_name,
				        ta.task_no,         
				      ta.task_nm, 
				      ta.task_cont,
				       DATE_FORMAT(ta.task_start, '%Y-%m-%d') as task_start,
				       
				       DATE_FORMAT(ta.task_due, '%Y-%m-%d') as task_due,
				     
				       le.lec_prof,
		                 ui.name,
		                 
		                 ts.task_sub_no,
		                 ts.task_send_cont,
		                 ts.task_tm,
		                 ts.upd_date,
		                 ts.enr_user,
		                 ts.file_no,
	                     fi.file_name,
	                     fi.file_physic_path,
	                     fi.file_logic_path,
	                     fi.file_size,
	                     fi.file_ext      
					      
						from tb_task ta
						inner join tb_lecture le on ta.lec_no=le.lec_no				
			
			        left outer join tb_task_send ts on ts.task_no= ta.task_no and ts.lec_no = ta.lec_no
			        inner join tb_userinfo ui on ui.loginID = le.lec_prof 
			         left outer join tb_files fi on ts.file_no = fi.file_no
			        where ta.lec_no =#{lec_no} and ta.task_no = #{task_no} and ts.enr_user = #{loginID};
   		     </select>    
	
	
	
		<select id="existTaskSend" resultType ="int">
		   select EXISTS ( select * from tb_task_send where lec_no =#{lec_no} and task_no =#{task_no} and enr_user = #{loginID} limit 1) as success;
		</select>
	
		<select id="assignNotExistSelectOne" resultType="kr.happyjob.study.supass.model.AssignmentModel">
		
			    	select 
				        ta.lec_no,
				        le.lec_name,
				        ta.task_no,         
				      ta.task_nm, 
				      ta.task_cont,
				       DATE_FORMAT(ta.task_start, '%Y-%m-%d') as task_start,
				       
				       DATE_FORMAT(ta.task_due, '%Y-%m-%d') as task_due,
				     
				       le.lec_prof,
            		   ui.name
		
					      
				from tb_task ta
				inner join tb_lecture le on ta.lec_no=le.lec_no	
      			  inner join tb_userinfo ui on ui.loginID = le.lec_prof
				 where ta.lec_no =#{lec_no} and ta.task_no = #{task_no}
		</select>
	
	
	 <insert id="assignStudentInsertFile"> 
	<!-- before insert문ㅅ닐행전에 쿼리문실행해라. --> <!-- no라는 변수를 형성함. -->
	    <selectKey resultType="int" keyProperty="no" order="BEFORE"> <!-- order before/after -->
          select ifnull(max(task_sub_no),0) + 1 from tb_task_send
        </selectKey>   
	
		insert into tb_task_send
			(
				lec_no
				,task_no
				,task_sub_no
				,task_send_cont
				,enr_user
				,task_tm
				,file_no
			
			)
			values (
				<!-- no : selectKey -->
				#{leclist}
				,#{task_no}
				,#{no}
				,#{task_send_cont}
				,#{loginID}	
				,now()
				
	
				<if test="fileexist eq 'N'.toString()">			
				,0
				</if>
				<if test = "fileexist eq 'Y'.toString()" >
				,(select ifnull(max(file_no),0) from tb_files)
				</if>
				
			)
	</insert>
	
		
		<update id="assignStudentUpdateFile">
			update tb_task_send
			set task_send_cont = #{task_send_cont}
				,task_tm = now()
				<if test="fileexist eq 'Y'.toString()"> <!-- filePrc는 따질필요없다. -->
				,file_no = (select ifnull(max(file_no),0) from tb_files)
				</if>
				<if test="fileexist eq 'N'.toString()">
				,file_no = 0
				</if>
				where task_no = #{task_no} and lec_no = #{lec_no} and enr_user= #{loginID}	
		
	</update>
	
	
		<delete id="assignStudentDeleteFile">
	 delete from tb_task_send where task_no = #{task_no} and lec_no = #{lec_no}	and enr_user= #{loginID}
	
	</delete>
	
	
	     <!-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@과제제출명단  시작@@@@@@@@@@@@@@@@@@@@@@@ -->
   		     <!-- 제출명단조회-->
   		     <select id="assignSubmitList" resultType="kr.happyjob.study.supass.model.AssignmentModel">
   		             
			          select 
			            ts.lec_no,
			            ts.task_no,
			            ts.task_sub_no,
			            ts.task_send_cont,
			            ts.enr_user,
			            ts.task_tm,
			            ui.user_email,
			            ui.name,
			            ts.file_no,
			            fi.file_name,
			            fi.file_physic_path,
			            fi.file_logic_path,
			            fi.file_size,
			            fi.file_ext
			          
			          from tb_task_send ts
			          left outer join tb_files fi on fi.file_no = ts.file_no 
			          inner join tb_userinfo ui on ui.loginID = ts.enr_user
			          where ts.lec_no =#{lec_no} and ts.task_no =#{task_no}
   		     	
   		     			ORDER BY ts.task_sub_no ASC
				LIMIT #{pageIndex}, #{pageSize}
   		     	   		     
   		     </select>
   		     
   		     <select id="countAssignSubmitList" resultType="int">
  			          select 
			        		count(*)
			          from tb_task_send ts
			          left outer join tb_files fi on fi.file_no = ts.file_no 
			          inner join tb_userinfo ui on ui.loginID = ts.enr_user
			          where ts.lec_no =#{lec_no} and ts.task_no =#{task_no};
   		     </select>
   		     
   		     
   		     
   		       <!-- 제출명단 상세조회-->
   		     <select id="submitStuSelectOne" resultType="kr.happyjob.study.supass.model.AssignmentModel">
   		             
			          select 
			            ts.lec_no,
			            ts.task_no,
			            ts.task_sub_no,
			            ts.task_send_cont,
			            ts.enr_user,
			            DATE_FORMAT(ts.task_tm, '%Y-%m-%d') as task_tm,			         
			            ui.user_email,
			            ui.name,
			            ts.file_no,
			            fi.file_name,
			            fi.file_physic_path,
			            fi.file_logic_path,
			            fi.file_size,
			            fi.file_ext
			          
			          from tb_task_send ts
			          left outer join tb_files fi on fi.file_no = ts.file_no 
			          inner join tb_userinfo ui on ui.loginID = ts.enr_user
			          where ts.lec_no =#{lec_no} and ts.task_no =#{task_no} and ts.enr_user = #{enr_user}
   		     	
   		     	   		     
   		     </select>
</mapper>
